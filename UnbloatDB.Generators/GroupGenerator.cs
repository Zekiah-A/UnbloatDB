using System;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace UnbloatDB.Generators
{
    [Generator]
    public class GroupGenerator : IIncrementalGenerator
    {
        private const string GroupAttributeAssemblyName = "UnbloatDB.Generators.Attributes.GroupAttribute";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var classRecordDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (node, token) => IsSyntaxTargetForGeneration(node),
                    transform: static (syntaxContext, token) => GetSemanticTargetForGeneration(syntaxContext))
                .Where(static classSyntax => classSyntax is not null);

            var compilationAndClasses = (IncrementalValueProvider<(Compilation Compilation, ImmutableArray<TypeDeclarationSyntax> ClassRecordSyntax)>)
                context.CompilationProvider.Combine(classRecordDeclarations.Collect())!;

            context.RegisterSourceOutput(compilationAndClasses,
                static (sourceProductionContext, source) => Execute(source.Compilation, source.ClassRecordSyntax, sourceProductionContext));
        }

        private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
        {
            return node switch
            {
                RecordDeclarationSyntax { AttributeLists.Count: > 1 } => true,
                ClassDeclarationSyntax { AttributeLists.Count: > 1 } => true,
                _ => false
            };
        }

        private static TypeDeclarationSyntax? GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
        {
            var classSyntax = (TypeDeclarationSyntax)context.Node;

            foreach (var attributeListSyntax in classSyntax.AttributeLists)
            {
                foreach (var attributeSyntax in attributeListSyntax.Attributes)
                {
                    var attributeSymbol = context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol;
                    if (attributeSymbol == null)
                    {
                        continue;
                    }

                    var attributeType = attributeSymbol.ContainingType;
                    if (attributeType.ToDisplayString() == GroupAttributeAssemblyName)
                    {
                        return classSyntax;
                    }
                }
            }

            return null;
        }

        private static void Execute(Compilation compilation, ImmutableArray<TypeDeclarationSyntax> classRecords, SourceProductionContext context)
        {
            /*if (classRecords.IsDefaultOrEmpty)
            {
                return;
            }
            var distinctClasses = classRecords.Distinct();
            var p = new Parser(compilation, context.ReportDiagnostic, context.CancellationToken);

            IReadOnlyList<LoggerClass> logClasses = p.GetLogClasses(distinctClasses);
            if (logClasses.Count > 0)
            {
                var e = new Emitter();
                string result = e.Emit(logClasses, context.CancellationToken);

                context.AddSource("LoggerMessage.g.cs", SourceText.From(result, Encoding.UTF8));
            }*/
            var mainMethod = compilation.GetEntryPoint(context.CancellationToken);
            var source = $$"""
                           // <auto-generated/>
                           using System;

                           namespace {{mainMethod.ContainingNamespace.ToDisplayString()}}
                           {
                               public static partial class {{mainMethod.ContainingType.Name}}
                               {
                                   static partial void HelloFrom(string name) =>
                                       Console.WriteLine($"Generator says: Hi from '{name}'");
                               }
                           }

                           """;
            var typeName = mainMethod.ContainingType.Name;
            context.AddSource($"{typeName}.g.cs", source);
        }
    }
}